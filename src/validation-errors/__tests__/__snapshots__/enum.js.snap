// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Enum > when value is a primitive > prints correctly for empty value 1`] = `
[
  "ENUM should be equal to one of the allowed values",
  "(foo, bar)
",
  "> 1 | "baz"
    | ^^^^^ 👈🏽  Did you mean bar here?",
]
`;

exports[`Enum > when value is a primitive > prints correctly for enum prop 1`] = `
[
  "ENUM should be equal to one of the allowed values",
  "(foo, bar)
",
  "> 1 | "baz"
    | ^^^^^ 👈🏽  Did you mean bar here?",
]
`;

exports[`Enum > when value is a primitive > prints correctly for no levenshtein match 1`] = `
[
  "ENUM should be equal to one of the allowed values",
  "(one, two)
",
  "> 1 | "baz"
    | ^^^^^ 👈🏽  Unexpected value, should be equal to one of the allowed values",
]
`;

exports[`Enum > when value is an object > prints correctly for empty value 1`] = `
[
  "ENUM should be equal to one of the allowed values",
  "(foo, bar)
",
  "  1 | {
> 2 |   "id": "baz"
    |         ^^^^^ 👈🏽  Did you mean bar here?
  3 | }",
]
`;

exports[`Enum > when value is an object > prints correctly for enum prop 1`] = `
[
  "ENUM should be equal to one of the allowed values",
  "(foo, bar)
",
  "  1 | {
> 2 |   "id": "baz"
    |         ^^^^^ 👈🏽  Did you mean bar here?
  3 | }",
]
`;

exports[`Enum > when value is an object > prints correctly for no levenshtein match 1`] = `
[
  "ENUM should be equal to one of the allowed values",
  "(one, two)
",
  "  1 | {
> 2 |   "id": "baz"
    |         ^^^^^ 👈🏽  Unexpected value, should be equal to one of the allowed values
  3 | }",
]
`;
