// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Enum when value is a primitive prints correctly for empty value 1`] = `
[
  "<red><bold>ENUM</intensity></color><red> should be equal to one of the allowed values</color>",
  "<red>(foo, bar)</color>
",
  "</><red><bold>></intensity></color><gray> 1 |</color> <green>"baz"</color>
 <gray>   |</color> <red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color> <red><bold>👈🏽  Did you mean <brightMagenta>bar<red> here?</intensity></color></>",
]
`;

exports[`Enum when value is a primitive prints correctly for enum prop 1`] = `
[
  "<red><bold>ENUM</intensity></color><red> should be equal to one of the allowed values</color>",
  "<red>(foo, bar)</color>
",
  "</><red><bold>></intensity></color><gray> 1 |</color> <green>"baz"</color>
 <gray>   |</color> <red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color> <red><bold>👈🏽  Did you mean <brightMagenta>bar<red> here?</intensity></color></>",
]
`;

exports[`Enum when value is a primitive prints correctly for no levenshtein match 1`] = `
[
  "<red><bold>ENUM</intensity></color><red> should be equal to one of the allowed values</color>",
  "<red>(one, two)</color>
",
  "</><red><bold>></intensity></color><gray> 1 |</color> <green>"baz"</color>
 <gray>   |</color> <red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color> <red><bold>👈🏽  Unexpected value, should be equal to one of the allowed values</intensity></color></>",
]
`;

exports[`Enum when value is an object prints correctly for empty value 1`] = `
[
  "<red><bold>ENUM</intensity></color><red> should be equal to one of the allowed values</color>",
  "<red>(foo, bar)</color>
",
  "</> <gray> 1 |</color> {
<red><bold>></intensity></color><gray> 2 |</color>   <green>"id"</color><yellow>:</color> <green>"baz"</color>
 <gray>   |</color>         <red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color> <red><bold>👈🏽  Did you mean <brightMagenta>bar<red> here?</intensity></color>
 <gray> 3 |</color> }</>",
]
`;

exports[`Enum when value is an object prints correctly for enum prop 1`] = `
[
  "<red><bold>ENUM</intensity></color><red> should be equal to one of the allowed values</color>",
  "<red>(foo, bar)</color>
",
  "</> <gray> 1 |</color> {
<red><bold>></intensity></color><gray> 2 |</color>   <green>"id"</color><yellow>:</color> <green>"baz"</color>
 <gray>   |</color>         <red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color> <red><bold>👈🏽  Did you mean <brightMagenta>bar<red> here?</intensity></color>
 <gray> 3 |</color> }</>",
]
`;

exports[`Enum when value is an object prints correctly for no levenshtein match 1`] = `
[
  "<red><bold>ENUM</intensity></color><red> should be equal to one of the allowed values</color>",
  "<red>(one, two)</color>
",
  "</> <gray> 1 |</color> {
<red><bold>></intensity></color><gray> 2 |</color>   <green>"id"</color><yellow>:</color> <green>"baz"</color>
 <gray>   |</color>         <red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color><red><bold>^</intensity></color> <red><bold>👈🏽  Unexpected value, should be equal to one of the allowed values</intensity></color>
 <gray> 3 |</color> }</>",
]
`;
